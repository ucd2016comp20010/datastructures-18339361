package com.company;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

/*
 * Map implementation using hash table with separate chaining.
 */

public class ChainHashMap<K, V> extends AbstractHashMap<K, V> {
    // a fixed capacity array of UnsortedTableMap that serve as buckets
    private UnsortedTableMap<K, V>[] table; 

    /** Creates a hash table with capacity 11 and prime factor 109345121. */
    public ChainHashMap() {
        super();
    }

    /** Creates a hash table with given capacity and prime factor 109345121. */
    public ChainHashMap(int capacity) {
        super(capacity);
    }

    /** Creates a hash table with the given capacity and prime factor. */
    public ChainHashMap(int capacity, int prime) {
        super(capacity, prime);
    }

    /** Creates an empty table having length equal to current capacity. */
    @Override
    @SuppressWarnings({ "unchecked" })
    protected void createTable() {
        table = (UnsortedTableMap<K, V>[]) new UnsortedTableMap[capacity];
    }

    /**
     * Returns value associated with key k in bucket with hash value h. If no such
     * entry exists, returns null.
     *
     * @param h the hash value of the relevant bucket
     * @param k the key of interest
     * @return associate value (or null, if no such entry)
     */
    @Override
    protected V bucketGet(int h, K k) {
        UnsortedTableMap<K, V> bucket = table[h];
        return bucket == null? null: bucket.get(k);
    }

    /**
     * Associates key k with value v in bucket with hash value h, returning the
     * previously associated value, if any.
     *
     * @param h the hash value of the relevant bucket
     * @param k the key of interest
     * @param v the value to be associated
     * @return previous value associated with k (or null, if no such entry)
     */
    @Override
    protected V bucketPut(int h, K k, V v) {
        UnsortedTableMap<K, V> bucket = table[h];
        if (bucket == null){
            bucket = new UnsortedTableMap<K, V>();
            table[h] = bucket;
        }
        int prev = bucket.size();
        V old = bucket.put(k, v);
        enteries+= (bucket.size() - prev);
        return old;
    }

    /**
     * Removes entry having key k from bucket with hash value h, returning the
     * previously associated value, if found.
     *
     * @param h the hash value of the relevant bucket
     * @param k the key of interest
     * @return previous value associated with k (or null, if no such entry)
     */
    @Override
    protected V bucketRemove(int h, K k) {
        UnsortedTableMap<K, V> bucket = table[h];
        if (bucket == null) return null;

        int prev = bucket.size();
        V old = bucket.remove(k);

        enteries-= (prev - bucket.size());
        return old;
    }

    /**
     * Returns an iterable collection of all key-value entries of the map.
     *
     * @return iterable collection of the map's entries
     */
    @Override
    public Iterable<Entry<K, V>> entrySet() {
        ArrayList<Entry<K, V>> string = new ArrayList<Entry<K,V>>();

        for(int i = 0; i < capacity; i++){
            UnsortedTableMap<K, V> bucket = table[i];
            if (bucket != null){
                for (Entry<K, V> entry : bucket.entrySet()){
                    string.add(entry);
                }
            }
        }
        return string;
    }

    public String toString(){
        return entrySet().toString();
    }

    public static void main(String[] args) {
        ChainHashMap<Integer, String> cm = new ChainHashMap<Integer, String>();
        cm.put(1, "One");
        cm.put(10, "Ten");
        cm.put(11, "Eleven");
        cm.put(20, "Twenty");

        System.out.println(cm);
        System.out.println("size before : " + cm.size());
        String n = cm.put(1, "ONe");
        System.out.println("size after : " + cm.size() + " -> " + n);

        System.out.println("cm.get(1) : " + cm.get(1));

        cm.remove(1);
        System.out.println("size after : " + cm.size());
    }
}
